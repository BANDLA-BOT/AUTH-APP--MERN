{"version":3,"sources":["authController.js"],"names":["_userModel","_interopRequireDefault","require","_errorHandler","_bcryptjs","signup","req","res","next","_req$body","username","email","password","salt","hashedPassword","newUser","regeneratorRuntime","async","_context","prev","body","abrupt","status","json","message","undefined","awrap","bcryptjs","genSalt","sent","hashSync","save","t0","errorHandler","stop"],"mappings":"0FAAA,IAAAA,WAAAC,uBAAAC,QAAA,4BACAC,cAAAD,QAAA,4BACAE,UAAAH,uBAAAC,QAAA,qFAGO,IAAMG,OAAS,SAAMC,EAAIC,EAAKC,GAAf,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAV,MAAA,KAAA,EAAA,GAAAC,EACoBH,EAAIc,KAAlCV,EADUD,EACVC,SAAUC,EADAF,EACAE,MAAOC,EADPH,EACOG,SAN7BN,EAAAc,KAKsB,CAAAF,EAAAV,KAAA,EAAA,MAAA,OAAAU,EAAAG,OAAA,SAGPd,EAAIe,OAAO,KAAKC,KAAK,CAACC,QAAQ,8BAHvB,KAAA,EAAA,QAKFC,IAAbb,EALe,OAAAM,EAAAG,OAAA,SAHtBd,EAAAe,OAAA,KAAAC,KAAA,CAAAC,QAAA,8BAGsBN,EAAAV,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAU,EAAAV,KAAA,EAAAQ,mBAAAU,MAQCC,UAAAA,QAASC,QAAQ,KARlB,KAAA,EAAA,OAQZf,EARYK,EAAAW,KASZf,EAAiBa,UAAAA,QAASG,SAASlB,EAAUC,GATpCE,EAAG,IAATV,WAAAA,QAAeC,CAAAA,SAAAA,EAASE,MAAAA,EAAfI,SAAAE,IAAAI,EAAAC,KAAA,GAAAD,EAAAV,KAAA,GAAAQ,mBAAAU,MAYRX,EAAQgB,QAZA,KAAA,GAAAxB,EAAAe,OAAA,KAAAC,KAAA,CAAAC,QAAA,4BAAAN,EAAAV,KAAA,GAAA,MAAA,KAAA,GAAAU,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,MAAA,IAAAV,GAAA,EAAAL,cAAA8B,cAAA,IAAA,yBAAA,KAAA,GAAA,IAAA,MAAA,OAAAf,EAAAgB,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA","file":"authController.min.js","sourcesContent":["import User from '../models/user.model.js'\r\nimport { errorHandler } from '../utils/errorHandler.js'\r\nimport bcryptjs from 'bcryptjs'\r\n\r\n\r\nexport const signup = async(req,res, next)=>{\r\n    const { username, email, password } = req.body\r\n    if(!req.body){\r\n        return res.status(300).json({message:\"Fields have no Data init\"})\r\n    }\r\n    if(password === undefined){\r\n        return res.status(300).json({message:\"Fields have no Data init\"})\r\n    }\r\n    const salt = await bcryptjs.genSalt(10)\r\n    const hashedPassword = bcryptjs.hashSync(password, salt)\r\n    const newUser = new User({username, email, password:hashedPassword})\r\n    try {\r\n        await newUser.save()\r\n        res.status(201).json({message:\"registered successfully\"})\r\n    } catch (error) {\r\n        next(errorHandler(500,'Something went wrong',))\r\n    }\r\n}"]}