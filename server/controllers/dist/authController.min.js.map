{"version":3,"sources":["authController.js"],"names":["_userModel","_interopRequireDefault","require","_bcryptjs","_jsonwebtoken","signup","req","res","_req$body","username","email","password","salt","hashedPassword","newUser","regeneratorRuntime","async","_context","prev","next","body","abrupt","status","json","message","undefined","awrap","bcryptjs","genSalt","sent","hashSync","User","save","t0","error","stop","login","_req$body2","validUser","token","_validUser$_doc","rest","expiryDate","_context2","findOne","compareSync","id","_id","process","env","JWT_ACCESS_KEY_LOGIN","expiresIn","_objectWithoutProperties","Date","now","cookie","httpOnly","expires","user"],"mappings":"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","file":"authController.min.js","sourcesContent":["import User from \"../models/user.model.js\";\r\nimport bcryptjs from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport const signup = async (req, res) => {\r\n  const { username, email, password } = req.body;\r\n  if (!req.body) {\r\n    return res.status(300).json({ message: \"Fields have no Data init\" });\r\n  }\r\n  if (password === undefined) {\r\n    return res.status(300).json({ message: \"Fields have no Data init\" });\r\n  }\r\n  const salt = await bcryptjs.genSalt(10);\r\n  const hashedPassword = bcryptjs.hashSync(password, salt);\r\n  const newUser = new User({ username, email, password: hashedPassword });\r\n  try {\r\n    await newUser.save();\r\n    res.status(201).json({ message: \"registered successfully\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nexport const login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n  if (!req.body) {\r\n    return res.status(400).json({ message:\"Fields are required\"});\r\n  }\r\n  try {\r\n    const validUser = await User.findOne({ email });\r\n    if (!validUser) {\r\n      return res.status(404).json({ message:'User not found' });\r\n    }\r\n    const validPassword = bcryptjs.compareSync(password, validUser.password);\r\n    if (!validPassword) {\r\n      return res.status(404).json({ message:'Incorrect Password'});\r\n    }\r\n    const token = jwt.sign(\r\n      { id: validUser._id },\r\n      process.env.JWT_ACCESS_KEY_LOGIN,\r\n      { expiresIn: \"15m\" }\r\n    );\r\n    const { password: hashedPassword, ...rest } = validUser._doc;\r\n    const expiryDate = new Date(Date.now() + 3600000)\r\n    res\r\n      .cookie(\"access_token\", token, { httpOnly: true, expires: expiryDate })\r\n      .status(200)\r\n      .json({\r\n        user: rest,\r\n        message: \"Logged in\",\r\n        login:true\r\n      });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n"]}