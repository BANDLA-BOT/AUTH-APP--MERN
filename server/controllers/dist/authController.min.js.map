{"version":3,"sources":["authController.js"],"names":["_userModel","_interopRequireDefault","require","_errorHandler","_bcryptjs","_jsonwebtoken","signup","req","res","next","_req$body","username","email","password","salt","hashedPassword","newUser","regeneratorRuntime","async","_context","prev","body","abrupt","status","json","message","undefined","awrap","bcryptjs","genSalt","sent","hashSync","User","save","t0","errorHandler","stop","login","_req$body2","validUser","token","_validUser$_doc","rest","expiryDate","_context2","findOne","compareSync","jwt","sign","id","_id","process","env","JWT_ACCESS_KEY_LOGIN","expiresIn","_doc","_objectWithoutProperties","Date","now","cookie","httpOnly","expires","user"],"mappings":"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","file":"authController.min.js","sourcesContent":["import User from '../models/user.model.js'\r\nimport { errorHandler } from '../utils/errorHandler.js'\r\nimport bcryptjs from 'bcryptjs'\r\nimport jwt from 'jsonwebtoken'\r\nexport const signup = async(req,res, next)=>{\r\n    const { username, email, password } = req.body\r\n    if(!req.body){\r\n        return res.status(300).json({message:\"Fields have no Data init\"})\r\n    }\r\n    if(password === undefined){\r\n        return res.status(300).json({message:\"Fields have no Data init\"})\r\n    }\r\n    const salt = await bcryptjs.genSalt(10)\r\n    const hashedPassword = bcryptjs.hashSync(password, salt)\r\n    const newUser = new User({username, email, password:hashedPassword})\r\n    try {\r\n        await newUser.save()\r\n        res.status(201).json({message:\"registered successfully\"})\r\n    } catch (error) {\r\n        next(errorHandler(500,'Something went wrong',))\r\n    }\r\n}\r\nexport const login = async(req,res, next)=>{\r\n    const { email, password } = req.body\r\n    try {\r\n        const validUser = await User.findOne({email})\r\n        if(!validUser)return next(errorHandler(404, 'User not found on this email'))\r\n        const validPassword = bcryptjs.compareSync(password, validUser.password)\r\n        if(!validPassword) return next(errorHandler(401,'Wrong credentials'))\r\n        const token = jwt.sign({id:validUser._id}, process.env.JWT_ACCESS_KEY_LOGIN, {expiresIn:'15m'})\r\n        const { password:hashedPassword, ...rest } = validUser._doc\r\n        const expiryDate = new Date(Date.now() + 3600000); //1 hour\r\n        res.cookie('access_token', token, { httpOnly:true, expires:expiryDate}).status(200).json({\r\n            user:rest\r\n        })\r\n    } catch (error) {\r\n        next(error)\r\n    }\r\n}"]}