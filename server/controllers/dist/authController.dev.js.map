{"version":3,"sources":["authController.js"],"names":["signup","req","res","next","body","username","email","password","status","json","message","undefined","bcryptjs","genSalt","salt","hashedPassword","hashSync","newUser","User","save","login","findOne","validUser","validPassword","compareSync","token","jwt","sign","id","_id","process","env","JWT_ACCESS_KEY_LOGIN","expiresIn","_doc","rest","expiryDate","Date","now","cookie","httpOnly","expires","user"],"mappings":"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","sourcesContent":["import User from '../models/user.model.js'\r\nimport { errorHandler } from '../utils/errorHandler.js'\r\nimport bcryptjs from 'bcryptjs'\r\nimport jwt from 'jsonwebtoken'\r\nexport const signup = async(req,res, next)=>{\r\n    const { username, email, password } = req.body\r\n    if(!req.body){\r\n        return res.status(300).json({message:\"Fields have no Data init\"})\r\n    }\r\n    if(password === undefined){\r\n        return res.status(300).json({message:\"Fields have no Data init\"})\r\n    }\r\n    const salt = await bcryptjs.genSalt(10)\r\n    const hashedPassword = bcryptjs.hashSync(password, salt)\r\n    const newUser = new User({username, email, password:hashedPassword})\r\n    try {\r\n        await newUser.save()\r\n        res.status(201).json({message:\"registered successfully\"})\r\n    } catch (error) {\r\n        next(errorHandler(500,'Something went wrong',))\r\n    }\r\n}\r\nexport const login = async(req,res, next)=>{\r\n    const { email, password } = req.body\r\n    try {\r\n        const validUser = await User.findOne({email})\r\n        if(!validUser)return next(errorHandler(404, 'User not found on this email'))\r\n        const validPassword = bcryptjs.compareSync(password, validUser.password)\r\n        if(!validPassword) return next(errorHandler(401,'Wrong credentials'))\r\n        const token = jwt.sign({id:validUser._id}, process.env.JWT_ACCESS_KEY_LOGIN, {expiresIn:'15m'})\r\n        const { password:hashedPassword, ...rest } = validUser._doc\r\n        const expiryDate = new Date(Date.now() + 3600000); //1 hour\r\n        res.cookie('access_token', token, { httpOnly:true, expires:expiryDate}).status(200).json({\r\n            user:rest\r\n        })\r\n    } catch (error) {\r\n        next(error)\r\n    }\r\n}"],"file":"authController.dev.js"}