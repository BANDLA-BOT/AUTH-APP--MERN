{"version":3,"sources":["authController.js"],"names":["signup","req","res","body","username","email","password","status","json","message","undefined","bcryptjs","genSalt","salt","hashedPassword","hashSync","newUser","User","save","error","login","findOne","validUser","validPassword","compareSync","token","jwt","sign","id","_id","process","env","JWT_ACCESS_KEY_LOGIN","expiresIn","_doc","rest","expiryDate","Date","now","cookie","httpOnly","expires","user"],"mappings":"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","sourcesContent":["import User from \"../models/user.model.js\";\r\nimport bcryptjs from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport const signup = async (req, res) => {\r\n  const { username, email, password } = req.body;\r\n  if (!req.body) {\r\n    return res.status(300).json({ message: \"Fields have no Data init\" });\r\n  }\r\n  if (password === undefined) {\r\n    return res.status(300).json({ message: \"Fields have no Data init\" });\r\n  }\r\n  const salt = await bcryptjs.genSalt(10);\r\n  const hashedPassword = bcryptjs.hashSync(password, salt);\r\n  const newUser = new User({ username, email, password: hashedPassword });\r\n  try {\r\n    await newUser.save();\r\n    res.status(201).json({ message: \"registered successfully\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\nexport const login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n  if (!req.body) {\r\n    return res.status(400).json({ message:\"Fields are required\"});\r\n  }\r\n  try {\r\n    const validUser = await User.findOne({ email });\r\n    if (!validUser) {\r\n      return res.status(404).json({ message:'User not found' });\r\n    }\r\n    const validPassword = bcryptjs.compareSync(password, validUser.password);\r\n    if (!validPassword) {\r\n      return res.status(404).json({ message:'Incorrect Password'});\r\n    }\r\n    const token = jwt.sign(\r\n      { id: validUser._id },\r\n      process.env.JWT_ACCESS_KEY_LOGIN,\r\n      { expiresIn: \"15m\" }\r\n    );\r\n    const { password: hashedPassword, ...rest } = validUser._doc;\r\n    const expiryDate = new Date(Date.now() + 3600000)\r\n    res\r\n      .cookie(\"access_token\", token, { httpOnly: true, expires: expiryDate })\r\n      .status(200)\r\n      .json({\r\n        user: rest,\r\n        message: \"Logged in\",\r\n        login:true\r\n      });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", error: error.message });\r\n  }\r\n};\r\n"],"file":"authController.dev.js"}